{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","mint","state","contract","methods","account","send","from","value","price","once","receipt","console","log","setState","mintedSoFar","totalCollectibles","provenanceHash","collectibles","openseaDomain","etherscanDomain","a","window","ethereum","request","method","web3","Web3","currentProvider","alert","eth","getAccounts","accounts","this","net","getId","networkId","loadContract","on","newAccounts","utils","toChecksumAddress","newNetworkId","parseInt","sub","events","CreateMyCollectible","loadBlockchainData","removeListener","unsubscribe","networkData","MyCollectible","networks","Contract","abi","address","totalSupply","call","MAX_COLLECTIBLES","walletOfOwner","tokenIds","Promise","all","map","tokenId","fetch","response","json","metadata","image","replace","className","id","role","loading","onSubmit","event","preventDefault","type","collectible","i","href","options","target","rel","src","alt","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5261cad5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\nimport './App.css';\r\nimport MyCollectible from '../abis/MyCollectible.json'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      contract: null,\r\n      price: 0,\r\n      mintedSoFar: 0,\r\n      totalCollectibles: 0,\r\n      provenanceHash: '',\r\n      collectibles: [],\r\n      openseaDomain: '',\r\n      etherscanDomain: ''\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (window.ethereum) {\r\n      await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      window.web3 = new Web3(window.ethereum)\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    } else {\r\n      window.alert('Non-Ethereum browser detected. Consider trying MetaMask.')\r\n      return\r\n    }\r\n    const accounts = await window.web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    const networkId = await window.web3.eth.net.getId()\r\n    await this.loadContract(networkId)\r\n    window.ethereum.on('accountsChanged', (newAccounts) => this.setState({ account: window.web3.utils.toChecksumAddress(newAccounts[0]) }))\r\n    window.ethereum.on('chainChanged', (newNetworkId) => this.loadContract(parseInt(newNetworkId, 16)))\r\n    this.sub = this.state.contract.events.CreateMyCollectible({}).on('data', () => this.loadBlockchainData())\r\n  }\r\n\r\n  async componentWillUnmount() {\r\n    window.ethereum.removeListener('accountsChanged', this.state.account)\r\n    window.ethereum.removeListener('chainChanged', this.state.account)\r\n    this.sub.unsubscribe()\r\n  }\r\n\r\n  async loadContract(networkId) {\r\n    networkId = networkId === 1337 ? 5777 : networkId\r\n    const networkData = MyCollectible.networks[networkId]\r\n    if (networkData) {\r\n      const contract = new window.web3.eth.Contract(MyCollectible.abi, networkData.address)\r\n      this.setState({ contract })\r\n      const openseaDomain = networkId === 1 ? 'opensea.io' : 'testnets.opensea.io'\r\n      this.setState({ openseaDomain })\r\n      const etherscanDomain = networkId === 1 ? 'etherscan.io' : 'rinkeby.etherscan.io'\r\n      this.setState({ etherscanDomain })\r\n      await this.loadBlockchainData()\r\n    } else {\r\n      window.alert('MyCollectible contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const mintedSoFar = await this.state.contract.methods.totalSupply().call()\r\n    this.setState({ mintedSoFar })\r\n    const totalCollectibles = await this.state.contract.methods.MAX_COLLECTIBLES().call()\r\n    this.setState({ totalCollectibles })\r\n    const provenanceHash = await this.state.contract.methods.provenanceHash().call()\r\n    this.setState({ provenanceHash })\r\n    const price = await this.state.contract.methods.price(1).call()\r\n    this.setState({ price })\r\n    const tokenIds = await this.state.contract.methods.walletOfOwner(this.state.account).call()\r\n    const collectibles = await Promise.all(tokenIds.map(async tokenId => {\r\n      const response = await fetch(`https://ipfs.io/ipfs/QmaFqMdDwTmHxYGRDv5X35wekimj1dKTgpme1rbbQoqbqh/${tokenId}`)\r\n      const metadata = await response.json()\r\n      return metadata.image.replace('ipfs://', 'https://ipfs.io/ipfs/')\r\n    }))\r\n    this.setState({ collectibles })\r\n  }\r\n\r\n  mint = () => {\r\n    this.state.contract.methods.mint(this.state.account, 1).send({ from: this.state.account, value: this.state.price })\r\n      .once('receipt', (receipt) => {\r\n        console.log(receipt)\r\n        this.setState({ mintedSoFar: this.state.mintedSoFar + 1 })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              <small className=\"text-white\"><span id=\"title\">My Collectible</span></small>\r\n            </li>\r\n          </ul>\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              {this.state.loading\r\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                : <div className=\"content\">\r\n                  <form className=\"input-group\" onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                    this.mint()\r\n                  }}>\r\n                    <button type=\"submit\" className=\"btn btn-block btn-primary\">MINT {this.state.price / 10 ** 18} ETH</button>\r\n                  </form>\r\n                  <span>{this.state.mintedSoFar}/{this.state.totalCollectibles}</span>\r\n                </div>\r\n              }\r\n            </main>\r\n          </div>\r\n          <hr />\r\n          <div className=\"row text-center\">\r\n            {this.state.collectibles.map((collectible, i) => {\r\n              return (\r\n                <div key={i} className=\"col-md-3 mb-3\">\r\n                  <a href={`https://${this.state.openseaDomain}/assets/${this.state.contract?.options.address}/${i}`} target=\"_blank\" rel=\"noreferrer\">\r\n                    <img className=\"w-50 p-3\" src={collectible} alt=\"\" />\r\n                  </a>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n          <hr />\r\n          <div><a href={`https://${this.state.etherscanDomain}/address/${this.state.contract?.options.address}#code`} target=\"_blank\" rel=\"noreferrer\">contract</a></div>\r\n          <div>provenance hash: {this.state.provenanceHash}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}